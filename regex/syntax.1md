# 正则表达式



## 常用字符表

常用符号

* `.` 匹配任意单个字符，行结束符`\r`和`\n`除外。当使用修饰符 `s` 时，`.`表示所有字符。
* `\d` 匹配任意阿拉伯数字，相当于`[0-9]`。
* `\D` 匹配任意一个不是阿拉伯数字的字符，相当于`[^\d]`, 这里`^`用在`[]`中表示取反的意思。
* `\w` 匹配任意阿拉伯字母，数字和下划线, 相当于`[0-9a-zA-Z_]`，即变量名中用到的符号。
* `\W` 与`\w`相反， 相当于`[^0-9a-zA-Z_]`。
* `\s` 匹配一个空白符，包括空格符，制表符，换行符，换页符和其他空格字符。
* `\S` 匹配一个非空白符，与`\s`相反。

空白字符

* `\s` 匹配任意空白字符，包括半角空格、回车符、换行符等。
* ` ` 匹配一个半角空格。
* `\t` 匹配一个水平制表符。
* `\r` 匹配一个回车符。
* `\n` 匹配一个换行符。
* `\v` 匹配一个垂直制表符。

字符集合

* `[abc]` 字符组，表示匹配集合中的任意一个字符，可以用`-`来指定范围。例如`[0-9]`表示所有数字，`[a-z]`表示所有小写英文字母。
* `[^abc]` 反义字符组，匹配不是集合中字符的一个字符，可以用`-`来指定范围。例如`[^\d]`表示所有不含数字。

匹配组或分组

* `( )` 匹配组在匹配到结果时可以直接通过索引得到相应的结果，如`let x = /([a-z])o/.exec('hello world');`，`x[0]`返回`lo`，`x[1]`返回字母`l`。
* `|` 表示“或”，如`/(hello|hi) world/`匹配`hello`或`hi`都可以。

边界

* `^` 不在`[]`中时，匹配字符串每行的开始。
* `$` 匹配字符串每行的结束。
* `\b` 匹配零宽单词边界，如`/[a-z]+\b/`匹配`"Hello World"`，得到`Hello`。
* `\B` 匹配非零宽单词边界，如`/[a-z]+\B/`匹配`"Hello World"`，得到`Hell`。

重复

* `?` 匹配 0 次或 1 次，表示有或者没有。
* `+` 重复一次或多次，即至少一次。
* `*` 重复 0 次或多次。
* `{n}` 重复 n 次。
* `{m,n}` 重复至少 m 次，至多 n 次。
* `{m,}` 重复至少 m 次。

非贪婪模式

* `?` 在重复符号`+`后面加上问号`?`表示非贪婪匹配，如`\d+?`，匹配结果返回尽可能少的字符，否则返回尽可能多的字符。

## 断言

断言用于查找匹配的前面的前面或后面是或者不是指定的字符或匹配，非常有用。“零宽”表示指定的匹配不返回；“正向”表“肯定”、“是”，“负向”表“否定”、“否”；“先行”指从左向右查找匹配，也可以理解是指定要匹配结果右侧的字符，“后行”是要匹配结果左侧是或者不是指定的字符。

* `(?=pattern)` 零宽正向先行断言，设定指定匹配后面有哪些字符。
* `(?!pattern)` 零宽负向先行断言，设定指定匹配后面没有哪些字符。
* `(?&lt;=pattern)` 零宽正向后行断言，设定指定匹配前面有哪些字符。ES 9 支持。
* `(?&lt;!pattern)` 零宽负向后行断言，设定指定匹配前面没有哪些字符。ES 9 支持。
* `(?:pattern)` 非捕获组，表示匹配但不在结果集中返回。



当分组多时很有用。

## 模式修饰符

因为 Javascript 有了 flag，所有不支持模式修饰符。模式修饰符和 flag 的作用基本相同，写在正则表达式的最前面，例如 `(?i)hello`，其中的`(?i)`即模式修改符。在 Java 和 Scala 语言中，支持的模式修饰符有：

* `(?i)` 即`ignore case`，表示忽略英文字母大小写。
* `(?s)` 即`single line`，同`dotAll`，让整个字符串当做一行来处理。这时符号`.`忽略换行符`\n`，支持跨行。
* `(?m)` 即`multiline`，让整个字符串当做多行来处理，这时符号`^`和`$`的意义改变为匹配每一行的开始和每一行的结束。
* `(?x)` 忽略空白字符（没试出来）。
* `(?u)` 匹配 Uicode 字符，很少用。
	